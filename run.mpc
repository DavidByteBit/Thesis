from Compiler.mpc_math import log_fx
from Compiler.mpc_math import cos
from Compiler.mpc_math import sin
from Compiler.mpc_math import sqrt
from Compiler.types import *
from Compiler.library import *

from Compiler import forward

import forward


# (16, 12, 2)
# (16,)
# (128, 16, 8)
# (128,)
# (100, 256)
# (100,)

conv1_w = sfix.Tensor((16, 12, 2))
conv1_b = sfix.Array(16)

conv2_w = sfix.Tensor((128, 16, 8))
conv2_b = sfix.Array(128)

dense1_w = sfix.Tensor((100, 256))
dense1_b = sfix.Array(100)

# conv1_w.assign_all(0)
# conv1_b.assign_all(0)
# conv2_w.assign_all(0)
# conv2_b.assign_all(0)
# dense1_w.assign_all(0)
# dense1_b.assign_all(0)

@for_range(16)
def _(i):
    @for_range(12)
    def _(j):
        @for_range(2)
        def _(k):
            conv1_w[i][j][k] = sfix.get_input_from(0)

@for_range(16)
def _(i):
    conv1_b[i] = sfix.get_input_from(0)

@for_range(128)
def _(i):
    @for_range(16)
    def _(j):
        @for_range(8)
        def _(k):
            conv2_w[i][j][k] = sfix.get_input_from(0)

@for_range(128)
def _(i):
    conv2_b[i] = sfix.get_input_from(0)

@for_range(100)
def _(i):
    @for_range(256)
    def _(j):
        dense1_w[i][j] = sfix.get_input_from(0)

@for_range(100)
def _(i):
    dense1_b[i] = sfix.get_input_from(0)


def relu(x):
    a = (x > 0)
    return (1-a) * x + a * x


layers = forward.Layers()

conv1_input_shape = (50,12)
conv1_output_shape = (49, 16)
conv1 = forward.Conv1D(conv1_input_shape, conv1_output_shape, conv1_w, conv1_b)
print(conv1_w)

max_pooling1_input_shape = conv1_output_shape
max_pooling1_output_shape = (24, 16)
max1 = forward.MaxPooling1D(conv1_input_shape, conv1_output_shape, 2, 16)

conv2_input_shape = max_pooling1_output_shape
conv2_output_shape = (17, 128)
conv2 = forward.Conv1D(conv1_input_shape, conv1_output_shape, conv2_w, conv2_b)

max_pooling2_input_shape = conv2_output_shape
max_pooling2_output_shape = (2, 128)
max2 = forward.MaxPooling1D(conv1_input_shape, conv1_output_shape, 8, 128, flatten_after=True)

dense1_input = max_pooling2_output_shape
dense1_output = 256
dense1 = forward.Dense(dense1_input, dense1_output, dense1_w, dense1_b, relu)

# dense2_input = dense1_output
# dense2_output = 100
# dense2 = forward.Dense(dense2_input, dense2_output, [0], [0], relu)

layers.add_layer(conv1)
layers.add_layer(max1)
layers.add_layer(conv2)
layers.add_layer(max2)
layers.add_layer(dense1)
# layers.add_layer(dense2)

input = sfix.Tensor((50,12)).assign_all(0)

layers.forward(input)



# def __init__(self, input_shape, output_shape, kernels, stride=None):


# print_ln("%s", conv1_w.reveal_nested())

# a = sfix.get_input_from(0)

